with Ada.Text_IO.Unbounded_IO;
with Ada.Text_IO;
with GNAT.String_Split;
with EU.Conversion_Utils;
with EU_Types;
with BE_Types;
with Text_Buffer;

package body EU.BE.Results.IO is
   
   use Ada.Text_IO;
   
   function Format( b : Boolean ) return String is
   begin
      if( b ) then return "1"; else return "0"; end if;
   end Format;
 
   function Read_Summary( line : Unbounded_String ) return Summary_Record is
      use GNAT.String_Split;
      use EU.Conversion_Utils;
      use EU_Types;
      use BE_Types;
      
      slices : Slice_Set := TDA_Tokenize( To_String( line ));
      summary : Summary_Record;
   begin
      summary.identifier_household := Convert( slices, 1 );
      summary.demographic_weight := Convert( slices, 2 );
      summary.standard_disposable_income := Convert( slices, 3 );
      summary.persons_monthly_original_income := Convert( slices, 4 );
      summary.sum_of_all_benefits_received_by_the_person := Convert( slices, 5 );
      summary.sum_of_all_taxes_paid_by_the_person := Convert( slices, 6 );
      summary.employee_social_insurance_contributions_paid_by_the_person := Convert( slices, 7 );
      summary.employer_social_insurance_contributions_paid_for_the_person_not_included_in_ils_dispy := Convert( slices, 8 );
      summary.self_employed_social_insurance_contributions_paid_by_the_person := Convert( slices, 9 );     
      return summary;
   end Read_Summary;
   
   function Read_Detailed( line : Unbounded_String ) return Detailed_Record is
      use GNAT.String_Split;
      use EU.Conversion_Utils;
      use EU_Types;
      use BE_Types;
      
      slices : Slice_Set := TDA_Tokenize( To_String( line ));
      detailed : Detailed_Record;
   begin
      
      
      
      
      -- AUTOGENERATED STARTS ---

      detailed.identifier_household := Convert( slices, 1 );
      detailed.identifier_person := Convert( slices, 2 );
      detailed.identifier_partner := Convert( slices, 3 );
      detailed.identifier_mother := Convert( slices, 4 );
      detailed.identifier_father := Convert( slices, 5 );
      detailed.demographic_country := Convert( slices, 6 );
      detailed.demographic_weight := Convert( slices, 7 );
      detailed.demographic_age := Convert( slices, 8 );
      detailed.demographic_gender := Convert( Get_String( slices, 9 ));
      detailed.demographic_marital_status := Convert( Get_String( slices, 10 ));
      detailed.demographic_education_current_status := Convert( Get_String( slices, 11 ));
      detailed.labour_market_economic_status := Convert( slices, 12 );
      detailed.labour_market_civil_servant := Convert( slices, 13 );
      detailed.demographic_consensual_union := Convert( Get_String( slices, 14 ));
      detailed.demographic_region_nuts_level_1 := Convert( Get_String( slices, 15 ));
      detailed.tax_income_tax_tax_allowance_tax_credit_simulated := Convert( slices, 16 );
      detailed.tax_income_tax_tax_credit_replacement_income_simulated := Convert( slices, 17 );
      detailed.tax_income_tax_tax_credit_child_simulated := Convert( slices, 18 );
      detailed.tax_income_tax_tax_credit_low_pay_or_income_simulated := Convert( slices, 19 );
      detailed.tax_income_tax_schedule_simulated := Convert( slices, 20 );
      detailed.income_disposable := Convert( slices, 21 );
      detailed.tax_income_tax_national_government_simulated := Convert( slices, 22 );
      detailed.assets_main_residence_tenure := Convert( Get_String( slices, 23 ));
      detailed.labour_market_occupation_isco_1_digit := Convert( Get_String( slices, 24 ));
      detailed.benefit_social_assistance_entitlement_simulated := Convert( slices, 25 );
      detailed.income_employment := Convert( slices, 26 );
      detailed.income_investment := Convert( slices, 27 );
      detailed.income_other := Convert( slices, 28 );
      detailed.income_property := Convert( slices, 29 );
      detailed.income_private_pension := Convert( slices, 30 );
      detailed.income_private_transfers := Convert( slices, 31 );
      detailed.income_self_employment := Convert( slices, 32 );
      detailed.expenditure_maintenance_payment := Convert( slices, 33 );
      detailed.pension_old_age := Convert( slices, 34 );
      detailed.pension_survivors := Convert( slices, 35 );
      detailed.pension_disability := Convert( slices, 36 );
      detailed.pension_health := Convert( slices, 37 );
      detailed.benefit_early_retirement := Convert( slices, 38 );
      detailed.benefit_social_assistance_simulated := Convert( slices, 39 );
      detailed.benefit_social_assistance_old_age_simulated := Convert( slices, 40 );
      detailed.benefit_education := Convert( slices, 41 );
      detailed.benefit_housing := Convert( slices, 42 );
      detailed.benefit_child_simulated := Convert( slices, 43 );
      detailed.benefit_child_birth_or_adoption_simulated := Convert( slices, 44 );
      detailed.benefit_unemployment := Convert( slices, 45 );
      detailed.benefit_unemployment_simulated := Convert( slices, 46 );
      detailed.benefit_family_parental_leave := Convert( slices, 47 );
      detailed.benefit_maternity := Convert( slices, 48 );
      detailed.tax_income_tax_capital_taxation_simulated := Convert( slices, 49 );
      detailed.tax_income_tax_municipal_government_simulated := Convert( slices, 50 );
      detailed.tax_sic_employee_simulated := Convert( slices, 52 );
      detailed.tax_sic_pensioner_simulated := Convert( slices, 53 );
      detailed.tax_sic_disabled_simulated := Convert( slices, 54 );
      detailed.tax_sic_employee_reduction_simulated := Convert( slices, 55 );
      detailed.tax_sic_employee_spouse_simulated := Convert( slices, 56 );
      detailed.tax_sic_self_employed_simulated := Convert( slices, 57 );
      detailed.standard_disposable_income := Convert( slices, 58 );
      detailed.persons_monthly_original_income := Convert( slices, 59 );
      detailed.sum_of_all_benefits_received_by_the_person := Convert( slices, 60 );
      detailed.sum_of_all_taxes_paid_by_the_person := Convert( slices, 61 );
      detailed.employee_social_insurance_contributions_paid_by_the_person := Convert( slices, 62 );
      detailed.employer_social_insurance_contributions_paid_for_the_person_not_included_in_ils_dispy := Convert( slices, 63 );
      detailed.self_employed_social_insurance_contributions_paid_by_the_person := Convert( slices, 64 );
      detailed.pension := Convert( slices, 65 );
      detailed.taxable_income := Convert( slices, 66 );
      detailed.taxable_income_something_mq := Convert( slices, 67 );
      detailed.bennt := Convert( slices, 68 );
      detailed.ils_benmt := Convert( slices, 69 );
      detailed.bensim := Convert( slices, 70 );
      detailed.taxsim := Convert( slices, 71 );
      detailed.ils_tinty := Convert( slices, 72 );
      detailed.tu_family_be_headid := Convert( slices, 73 );
      detailed.head_of_household_indentifier := Convert( slices, 74 );      
      
      -- AUTOGENERATED ENDS
      return detailed;
   end Read_Detailed;
  
   procedure Read_To_List( 
      filename : String; 
      personal_level_list : out Detailed_Results_List; 
      hh_level_list       : out Detailed_Results_List ) is
      use Text_Buffer;
      use Detailed_Results_Package;

      detailed  : Detailed_Record;
      buff : Buffer;
   begin
      Put_Line( "Read_To_List; opening " & filename );
      buff := Load( filename );
      for l in 2 .. buff.Num_Lines loop
         detailed := Read_Detailed( buff.Get_Line( l ));  
         Add_To_List( personal_level_list, detailed );
         Add_To_List( hh_level_list, detailed, true );
      end loop;
   end Read_To_List;

end EU.BE.Results.IO;
